manifest {
    description = 'Cell Ranger Genome Build'
    mainScript = 'main.nf'
}

params {

    // Slurm Parameters 

    userID = "c.c1430759"
    userProjectCode = "scw1557"

    sleepTimeStart = '0m'
    sleepTimeEnd = '0m'
    retries = '5'

  executor {
    queueSize = 40
    submitRateLimit = '1 sec'
  }

    // Basic zUMIs options

    // Project Information

    projectName = "PBMC_10k"
    projectDir = "/scratch/${userID}/scRNAseq-zUMIs/"
    
    // Input/Output/Resources

    binDir = "bin/"
    inputDir = "input/"
    outputDir = "output/"
    resourcesDir = "resources/"
    
    input_csv = "${params.projectDir}${inputDir}input.csv"
    
    read_length = 90

    genomeName = "Homo_sapiens.GRCh38"
    fastaName = "Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa"
    gtfName = "Homo_sapiens.GRCh38.104.chr.gtf"
    genome = "/home/${userID}/resources/genomes/human/hg38/${fastaName}.gz"
    gtf = "/home/${userID}/resources/genomes/human/hg38/${gtfName}.gz"

    // Advanced zUMIs options
    
    // Reference genome options

    exon_extension = "FALSE"
    extension_length = 0
    scaffold_length_min = 0

    // Filter Cutoffs

    // Barcode Filter
    BC_num_bases = "1"
    BC_phred = "20"

    // UMI Filter
    UMI_num_bases = "1"
    UMI_phred = "20"

    // Barcode Options

    barcode_file = "${params.projectDir}${resourcesDir}3M-february-2018.txt"
    barcode_num = ""
    barcode_automatic = "TRUE"
    barcode_sharing = ""
    barcode_binning = 1
    n_reads_per_cell = 100
    demultiplex = "FALSE"

    // Counting Options

    include_introns = "TRUE"
    intron_probability = "TRUE"
    downsampling = 0
    strand = 1
    ham_dist = 1
    velocyto = true
    primary_hit = "TRUE"
    multi_overlap = "FALSE"
    fraction_overlap = 0
    two_pass = "TRUE"

    // Mapping

    additional_STAR_params = "NONE"
    additional_fq = "NONE"

    // Statistical Outputs and Plots

    make_stats: "TRUE"
    
    // Memory/Threading

    num_threads = 32
    mem_limit = 100

}

process {
    executor = "slurm"
    queue = "htc"
    clusterOptions = "-A ${params.userProjectCode}"
}


params.logDir = "${params.projectDir}${params.projectName}_logs"

process.afterScript = {
    logMainDir = params.logDir

    // Check whether log dir is located in S3 if using awsbatch and is a local directory otherwise
    if (workflow.profile == "aws") {
        if (!logMainDir.matches("^s3://.*")) logMainDir = "s3:/" + workflow.workDir.toString() + "/log"
    } else {
        logMainDir = workflow.launchDir.resolve(logMainDir).toString()
        if (!logMainDir.matches("^/.*")) logMainDir = workflow.launchDir.toString() + "/log"
    }

    // Build log directory path based on task name
    logSubDir = task.name.replace(" (null)", "").replace(" ", "/").replaceAll(" ", "_").replaceAll("[()]", "")
    logDir = logMainDir + "/" + logSubDir

    // Define command to copy log files 
    cpLogCmd = workflow.profile == "aws" ?
        "nxf_s3_upload '*.txt' ${logDir}; " :
        "mkdir -p ${logDir}; cp -a *.txt ${logDir}; "

    // Assemble final command
    cmd = "ls -alR --full-time > .command.ls; "
    cmd += "mkdir nxf_log; "
    cmd += "for file in .command.*; do cp -a \${file} nxf_log/\${file#.}.txt; done; "
    cmd += "cd nxf_log; "
    cmd += cpLogCmd
    cmd += "cd ..;"
    cmd
}

workDir = "${params.projectDir}work"

cleanup = true

process.container = 'zUMIs.sif'
singularity.enabled = true